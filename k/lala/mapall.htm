<!doctype HTML>
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>hidden lalaletters</title>
<link title="style" rel="stylesheet" type="text/css" href="style.css">
<meta name="viewport" content="initial-scale=1.0, user-scalable=no" /> 
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script> 
<script type="text/javascript" src="http://code.jquery.com/jquery-1.10.1.min.js"></script>
<script type="text/javascript" src="http://code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
<script type="text/javascript" src="/inc/downloadxml.js"></script> 
<script type="text/javascript" src="/inc/gxml.js"></script> 
<style type="text/css">
    html { height: 100% }
    body { height: 100%; margin: 0; padding: 0 }
    #map-canvas { height: 90% }
    
    #markerct {margin: 1em; }
    #infowindow { 
	    width:100px; height:100px;
		font-size:90%;
	}
</style>
</head>
<body>

<div id="markerct">&nbsp;&nbsp;<a href="http://lalaletters.blogspot.com/">&lt;
back to the lalaletters blog</a></div>
    
<div id="map-canvas"></div>

<script type="text/javascript">

    // global "map" variable
    var map = null;
    var infowindow = null;

    // A function to create the marker and set up the event window function 

    function createMarker(latlng, name) {
        var marker = new google.maps.Marker({
            position: latlng,
            map: map,
            title: name,    // name,
            zIndex: Math.round(latlng.lat() * -100000) << 5
        });

        // Display infowindow (same as hover-over text)
        google.maps.event.addListener(marker, 'click', function () {
            infowindow.setContent("<div id='infowindow'>" + name + "</div>");
            infowindow.open(map, marker);
        });
    }

    function initialize() {

        // HTML5/W3C Geolocation
		if ( navigator.geolocation ) {
			navigator.geolocation.getCurrentPosition( UserLocation );
		} else if (getParameter("lat") != "") {
            // Or zoom to marker if selected in querystring (from emailed "found!" notices)
            BuildMap(getParameter("lat"), getParameter("lng"), 14)
        } else {
            // Otherwise use US/Europe zoom-out view
            BuildMap(21.722035725, -38.3203125, 3);
        }
    }

    // Callback function for asynchronous call to HTML5 geolocation
	function UserLocation( position ) {
		BuildMap( position.coords.latitude, position.coords.longitude, 14 );
	}

	function BuildMap(lat, lng, zoom) {
        var myOptions = {
            zoom: zoom,
            center: new google.maps.LatLng(lat, lng)
        }

        map = new google.maps.Map(document.getElementById("map-canvas"), myOptions);

        infowindow = new google.maps.InfoWindow();

        /* Only use this to get new center-of-map coords */
        google.maps.event.addListener(map, 'dragend', function () {
            var c = map.getCenter();
            console.log(c.lat() + ', ' + c.lng());
        });


        // Read markers from XML
        downloadUrl("/lala/maps/private321.xml", function (doc) {
            var xmlDoc = xmlParse(doc);
            var markers = xmlDoc.documentElement.getElementsByTagName("marker");
            for (var i = 0; i < markers.length; i++) {
                // obtain the attribues of each marker
                var lat = parseFloat(markers[i].getAttribute("lat"));
                var lng = parseFloat(markers[i].getAttribute("lng"));
                var point = new google.maps.LatLng(lat, lng);
                var label = GXml.value(markers[i].getElementsByTagName("desc")[0]);
                // create the marker
                var marker = createMarker(point, label);

            }
            $("#markerct").prepend(i + ' lalaletters hidden so far. Click/tap markers for details.')

        });
    }

    google.maps.event.addDomListener(window, 'load', initialize);

    /* Get querystring parameters (lat/long for zooming to a found letter) */
    function getParameter(name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }

    $(function () {
        // reserved
    });
</script> 
</body>
</html>